#!/bin/sh

. /boot/userconfig.txt

# Execute getopt on the arguments passed
PARSED_OPTIONS=$(getopt -n "$0"  -o cdhp:mtu:v:x -l "check,download,help,manual,path:,test,update,version:,user:"  -- "$@")

# Check that getopts went through ok
if [ $? != 0 ] ; then echo "Failed parsing options." >&2 ; exit 1 ; fi

eval set -- "$PARSED_OPTIONS"

help(){
echo "Usage: "$(basename "$0")" [OPTIONS ]

 Options:
  -c, --check               Checks version numbers of aroio (local and remote)
  -d, --download            Download the update-file
  -h, --help                This helptext
  -m, --manual              Runs download and update in one go
  -t, --test                Validate downloaded image-file
  -x, --update              Update to the downloaded version of aroio
  -p, --path <path>         Alternative path for image, usefull for update via USB stick ect..
  -u, --user <username>     Check for updates in specified user-folder
  -v, --version <version>   Specify version to install"
}

restart(){
	# wait 3s and reboot the system
	cardmount ro
	sleep 3
	reboot
}

check(){
	# get remote version
	REMOTE_VERSION=$(wget --no-check-certificate -q -O - "$UPDATESERVER"/latest)
	if $(REMOTE_VERSION=$(wget --no-check-certificate -T 4 -q -O - "$UPDATESERVER"/latest))
	then
		LOCAL_VERSION=$(head -n1 /boot/version)
		echo $REMOTE_VERSION
		echo $LOCAL_VERSION
		echo "Remote version is: $REMOTE_VERSION"
		echo "Local version is:  $LOCAL_VERSION"
	else
		echo "Could not find remote version..."
		echo "$LOCAL_VERSION"
	fi
}

download(){
	[ "$REMOTE_VERSION" = "" ] && REMOTE_VERSION=$(wget --no-check-certificate -q -O - "$UPDATESERVER"/latest)

	echo "Downloading image..."
		mkdir -p "$USRPATH" && cd "$USRPATH"
		sleep 1
	if ! $(wget --no-check-certificate "$UPDATESERVER"/aroio-"$REMOTE_VERSION".img.xz)
	then
		echo "File not downloaded, exiting!"
		rm "$USRPATH"/aroio-*
		exit 2
	fi
}

test(){
	echo "Testing checksum of update-image..."
		cd "$USRPATH"
		[ $? != 0 ] 2> /dev/null && echo "Invalid path given, exiting!" && exit 5

		# Check if we have more than one file to deal with
		if [ "$REMOTE_VERSION" = "" ] && [ $(ls aroio-* -lh 2> /dev/null | wc -l) -gt 1 ]
		then
			echo "There is more than one image in the update folder! Please specify one with the version option."
			ls aroio-* -lh 2> /dev/null
			exit 2
		fi

		# Check if version is set and if not set it from our only file
		[ "$REMOTE_VERSION" = "" ] && REMOTE_VERSION=$(ls aroio-* 2> /dev/null | awk -F'[-|.]' {'print $2"."$3'})
		if [ -e aroio-"$REMOTE_VERSION".img.xz ]
		then
			if xz -tv aroio-"$REMOTE_VERSION".img.xz
			then
				echo "Checksum ok, image can be written to disk..."
			else
				echo "Incorrect checksum, exiting!"
					exit 5
			fi
		else
			echo "No suitable update-file found, exiting!"
					exit 5
		fi
}

update(){
	echo heartbeat >/sys/class/leds/led0/trigger
	touch /tmp/update_running
	echo "Update started..."

	# Stop daemons that might write to the SDcard before updating
	controlaudio stop
	systemctl stop brutefir-checkfilters.service

	cd "$USRPATH"
		[ $? != 0 ] 2>/dev/null && echo "Invalid path given, exiting!" && exit 5

	# Check if we have more than one file to deal with
	if [ "$REMOTE_VERSION" = "" ] && [ $(ls aroio*  -lh|wc -l) -gt 1 ]
		then
			echo "There is more than one image in the update folder! Please specify one with the version option."
			ls aroio*  -lh
			echo none >/sys/class/leds/led0/trigger
			rm /tmp/update_running
			exit 2
	fi

	# Check if version is set and if not set it from our only file
	[ "$REMOTE_VERSION" = "" ] && REMOTE_VERSION=$(ls aroio-* | awk -F'[-|.]' {'print $2"."$3'})

	echo "Backing up user configuration"
		cardmount rw
		mkdir -p "$USRPATH"/save
		cd /boot
		cp -r /boot/userconfig.txt "$USRPATH"/save
		cp -r /boot/config.txt "$USRPATH"/save
		grep -q initramfs /"$USRPATH"/save/config.txt  && cardmount rw && sed -i '/initramfs rootfs.cpio/d' "$USRPATH"/save/config.txt
		cp -r /boot/filter "$USRPATH"/save
		cp /boot/btdb.tar "$USRPATH"/save
	echo "Unmounting SD-Card..."
		cd /
		umount /boot
		cd "$USRPATH"
	echo "Installing downloaded update-image to SD-card..."
		unxz -vc aroio-"$REMOTE_VERSION".img.xz | dd of=/dev/mmcblk0
		sync
	echo "Mounting updated partition..."
		mount /dev/mmcblk0p1 /boot
		sleep 1
	echo "Restoring user files..."
		cp -r "$USRPATH"/save/userconfig.txt /boot
		[[ "$REMOTE_VERSION" != "3.50" && "$REMOTE_VERSION" != "3.56" ]] && cp -r "$USRPATH"/save/config.txt /boot
		cp -r "$USRPATH"/save/filter /boot
		cp -r "$USRPATH"/save/btdb.tar /boot
	echo "Everything done, will reboot now. Please wait 20 seconds and DO NOT refresh page. Click System or Configuration link above."

	# Queues reboot in 5s and exits script - that gives the ui-server time to respond back to user
	restart &
	exit 0
}

# Force helptext if no options given
[ "$1" = "--" ] && help

ERROR_USER="Option \"user\" given more than once, please correct!"
ERROR_USRPATH="Option \"path\" given more than once, please correct!"
ERROR_USRPATH_SLASH="Option \"path\" should be set with an absolute path, please correct!"
ERROR_VERSION="Option \"version\" given more than once, please correct!"
ERROR_COMBI="Impossible combination of options given, please correct!"

# Make sense of our options...
while true; do
	case "$1" in
		-u|--user)
			[ "$MANUSER" != "" ] && echo "$ERROR_USER" && exit 2 || MANUSER=1 && UPDATESERVER=""$UPDATESERVER"/"$2"" && shift 2 ;;

		-v|--version)
			[ "$REMOTE_VERSION" != "" ] && echo "$ERROR_VERSION" && exit 2 || REMOTE_VERSION="$2" && shift 2 ;;

		-p|--path)
			[ "$USRPATH" != "" ] && echo "$ERROR_USRPATH" && exit 2 || [ "$2" = "${2#/}" ] && echo "$ERROR_USRPATH_SLASH" && exit 3 || USRPATH="$2" && shift 2 ;;

		-c|--check)
			[ "$ACTION" != "" ] && echo "$ERROR_COMBI" && exit 3 || ACTION="check" && shift	;;

		-d|--download)
			[ "$ACTION" != "" ] && echo "$ERROR_COMBI" && exit 2 || ACTION="download" && shift ;;

#		-l|--list)
#			[ "$ACTION" != "" ] && echo "$ERROR_COMBI" && exit 2 || ACTION="list" && shift ;;

		-m|--manual)
			[ "$ACTION" != "" ] && echo "$ERROR_COMBI" && exit 2 || ACTION="manual" && shift ;;

		-t|--test)
			[ "$ACTION" != "" ] && echo "$ERROR_COMBI" && exit 2 || ACTION="test" && shift ;;

		-x|--update)
			[ "$ACTION" != "" ] && echo "$ERROR_COMBI" && exit 2 || ACTION="update" && shift ;;

		--)
			shift && break ;;

		-h|:|--help|\?|*)
			help && exit 2;;
	esac
done

# Set USRPATH if not done by options...
[ "$USRPATH" = "" ] && USRPATH="/tmp"

case "$ACTION" in
	check)
		check ;;

	download)
		download ;;

#	list)
#		echo "
#Will list" && list ;;

	manual)
		download && update ;;

	test)
		test ;;

	update)
		update ;;

	"")
		echo "No action selected, please choose one and re-run." && exit 6 ;;
esac
